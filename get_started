What's tensorflow?
      --open source software library for numerical computation using data flow graphs.
      --google开发，用于指导机器学习及神经网络研究。
      --在其他领域也有广泛的应用
Why's tensorflow?
      --支持python api接口
      --高扩展性；可用于一个或者多个cpu，GPU桌面系统，服务器，移动设备等。
      --可移植性；可用于树莓派、安卓、windows、ios、linux
      --支持可视化
      --支持检查点
      --比较大的社区
      --应用于大型项目
使用tensorflow的公司：
      --google、OpenAI、DeepMind、SnapChat、Uber、Airbus、eBay、DropBox
 tensorflow几个cool的项目：
      --neural style translation,该项目，给出一个输入一张代表内容的图片和一张代表风格的图片，深度学习网络会输出一张融合了这个风格和内容的新作品。
      --Generative Handwriting
      --WaveNet 语音合成
 学习tensorflow的参考书籍：
      --TensorFlow for Machine Intelligence
      --Hands-On Machine Learning with Scikit-Learn and TensorFlow
      --Fundamentals of Deep Learning
      --注：由于tensorflow还处于快速开发中，因此上述内容可能会过时，最好直接访问网站：tensorflow.org
 言归正传，正式开始tensorflow的学习：
 
 一：tensorflow在fedroa系统的安装
 在python3安装该tensorflow包：
 1：安装python3、python3-pip、python3-virtualenv(如果安装过请忽略）
 2：virtualenv-3.5 --system-site-packages -p python3 tensorflow 建立一个单独的tensorflow运行环境
 3：source ~/tensorflow/bin/activate 使用运行环境生效
 4：进入(tensorflow) [zhangfh@localhost ~]$ 
 5:easy_install -U pip 升级pip、使用版本大于8.1 （如果该版本大于8.1 可以忽略）
 6：pip3 install --upgrade tensorflow  安装 tensorflow
 7:deactivate 命令解tensorflow运行环境
 8：删除tensorflow，可以直接删除命令 rm -rf tensorflow
 二：使用python api接口学习：
    首先使用包import tensorflow as tf:
    1：Graphs and Sessions
    tensorflow 使数据定义和数据执行分开
    数据流图大概有两个阶段：a：构建一个图，根据不同的操作关系；b:创建一个session执行图中的各个操作
    2：what‘s tensorflow
    总体上来说，tensorflow 是一个多维数组 0-d tensor :一个数字 ，1-d tensor：vector，2-d tensor： matrix
    例如：>>> import tensorflow as tf
    >>> a=tf.add(3,5)
    此时打印a，并不是输出数字8，而是输出一个tensor
    >>> print(a)
    Tensor("Add:0", shape=(), dtype=int32)
    Tensor board 展示如下图：
    x------>|add
    y------>|
    那么，怎样才能获取a的值呢？？
    创建一个session，sess=tf.Session()
    print(sess.run(a))
    sess.close()即可！
    >>> sess=tf.Session()
    2018-02-26 11:54:10.453635: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA
    >>> print(sess.run(a))
    8
    >>> sess.Close()

   
      
      
